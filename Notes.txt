ExpressJS Notes:
1. Install NodeJS for purposes of package installations

2. Create a folder, open that in vscode

3. Next step is to initialise this folder by npm init

4. Hit enter till end, and you will get package.json folder, which is 
packages which are installed are kept in this file

5. Install express package, npm install express, You will node modules folder
very large folder, if you delete that folder, you can install again by npm init

6. Next step is create index.js file

7. From this link https://expressjs.com/en/starter/hello-world.html, copy code of hello
world basic express example of http server, you can create http server with NodeJS,
but you have to write custom codes like to write status codes if else statements,
if 404 error display this message. with express no need to do all that, expressjs will
automatically set all these and give you with clean codes.
//Index.js
const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.get('/about', (req, res) => {
  res.send('about')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

8. Install Thunderclient, run index.js file
PS F:\ExpressJS_Tuts> node index.js
Example app listening on port 3000

9. Go to thunderclient, new request, paste http://localhost:3000/, Get method and 
send you will get hello world message. http://localhost:3000/about, Get method and 
send you will get about message.

10. Lets create a basic html template, 
//index.html
const express = require('express')
const app = express()
const path = require('path')
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.get('/about', (req, res) => {
//   res.send('about')
res.sendFile(path.join(__dirname, 'index.html'))
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

11. In index.js file
const express = require('express')
const app = express()
const path = require('path')
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.get('/about', (req, res) => {
//   res.send('about')
res.sendFile(path.join(__dirname, 'index.html'))
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

12. Install npm install -g nodemon, installs nodemon globally

13. Then run npx nodemon index.js
PS F:\ExpressJS_Tuts> npx nodemon index.js
npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead. 
[nodemon] 2.0.20
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node index.js`
Example app listening on port 3000

//Output
http://localhost:3000/ Hello world
http://localhost:3000/about I am a complex html template

14. run nodemon, but you need to restart cause, 
[nodemon] watching extensions: js,mjs,json, not html so restart and refresh

15. Go to boostrap, https://getbootstrap.com/docs/5.2/getting-started/introduction/
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
  </head>
  <body>
    <h1>Hello, world!</h1>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8" crossorigin="anonymous"></script>
  </body>
</html>

16. boostrap Navbar
//index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
  </head>
  <body>
    <nav class="navbar navbar-expand-lg bg-light">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">Navbar</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="#">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="#">Link</a>
              </li>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Dropdown
                </a>
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="#">Action</a></li>
                  <li><a class="dropdown-item" href="#">Another action</a></li>
                  <li><hr class="dropdown-divider"></li>
                  <li><a class="dropdown-item" href="#">Something else here</a></li>
                </ul>
              </li>
              <li class="nav-item">
                <a class="nav-link disabled">Disabled</a>
              </li>
            </ul>
            <form class="d-flex" role="search">
              <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
              <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
          </div>
        </div>
      </nav>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8" crossorigin="anonymous"></script>
  </body>
</html>

http://localhost:3000/about , you will see navbar

17. errors
index.js
const express = require('express')
const app = express()
const path = require('path')
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.get('/about', (req, res) => {
//   res.send('about')
res.sendFile(path.join(__dirname, 'index.html'))
res.status(500)
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

//set res.status(500), in console you will see error

18. Index.js
const express = require('express')
const app = express()
const path = require('path')
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.get('/about', (req, res) => {
//   res.send('about')
// res.sendFile(path.join(__dirname, 'index.html'))
// res.status(500)
res.json({"harry": 34})
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

//Output
{"harry":34}

19. Now lets create a public folder to serve static files. Create public folder inside
that create index.html file
//index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>This is index</title>
  </head>
  <body>
    <div class="container">
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quas, sit. Est
      dolor minima aperiam molestiae, magnam, hic reprehenderit totam maxime
      dolorum necessitatibus aspernatur fuga esse facilis quis commodi? Dicta
      aut amet consequuntur possimus at?
    </div>
  </body>
</html>

//index.js
const express = require("express");
const app = express();
const path = require("path");
const port = 3000;

app.use(express.static(path.join(__dirname, "public")))
//middleware, keep accees of request and response
//function, keep accees of request and response

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.get("/about", (req, res) => {
  //   res.send('about')
  // res.sendFile(path.join(__dirname, 'index.html'))
  // res.status(500)
  res.json({ harry: 34 });
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

//Output
Public index.html paragraph will be displayed.

20. Own middleware
//index.js
const express = require("express");
const app = express();
const path = require("path");
const port = 3000;


const harryMiddleware = (req, res, next) =>{
  console.log(req)
}
//own middleware, req, res, next.
//next is used when if there is another middleware after harryMiddleware for
//example that will be executed or called after harryMiddleware

app.use(express.static(path.join(__dirname, "public")))
app.use(harryMiddleware)
//middleware, keep access of request and response

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.get("/about", (req, res) => {
  //   res.send('about')
  // res.sendFile(path.join(__dirname, 'index.html'))
  // res.status(500)
  res.json({ harry: 34 });
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

//refresh the browser to see output, similar output since its lengthy only short
//output is displayed
  shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Circular *1],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      locals: [Object: null prototype] {},
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    timeout: 0,
    [Symbol(async_id_symbol)]: 13,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: -1,
      _idlePrev: null,
      _idleNext: null,
      _idleStart: 3547,
      _onTimeout: null,
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: true,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 25,

//index.js
const express = require("express");
const app = express();
const path = require("path");
const port = 3000;


// const harryMiddleware = (req, res, next) =>{
//   console.log(req)
//   next()
// }
//own middleware, req, res, next.

app.use(express.static(path.join(__dirname, "public")))
// app.use(harryMiddleware)
//middleware, keep access of request and response

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.get("/about", (req, res) => {
  //   res.send('about')
  // res.sendFile(path.join(__dirname, 'index.html'))
  // res.status(500)
  res.json({ harry: 34 });
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

21. 
//index.js
const express = require("express");
const app = express();
const path = require("path");
const port = 3000;


// const harryMiddleware = (req, res, next) =>{
//   console.log(req)
//   next()
// }
//own middleware, req, res, next.

app.use(express.static(path.join(__dirname, "public")))
// app.use(harryMiddleware)
//middleware, keep access of request and response

app.get("/hello/:name", (req, res) => {
  res.send("Hello World! " + req.params.name);
});
//want to print name along with hello path, also print that name, then use this
//req.params.name put that code to use this functionality

app.get("/about", (req, res) => {
  //   res.send('about')
  // res.sendFile(path.join(__dirname, 'index.html'))
  // res.status(500)
  res.json({ harry: 34 });
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

//Output
http://localhost:3000/hello/shyam
Hello World!shyam

22. Next we will create a Blog website
for that create a seperate folder called BlogExpress, npm init 
that folder, enter till end, add description if you want. and create
index.js file and copy paste the codes and paste in this index.js file
//index.js
const express = require("express");
const app = express();
const path = require("path");
const port = 3000;


// const harryMiddleware = (req, res, next) =>{
//   console.log(req)
//   next()
// }
//own middleware, req, res, next.

app.use(express.static(path.join(__dirname, "static")))
// app.use(harryMiddleware)
//middleware, keep access of request and response

app.get("/", (req, res) => {
  res.sendFile()
});
//want to print name along with hello path, also print that name, then use this
//req.params.name put that code to use this functionality

app.get("/about", (req, res) => {
  //   res.send('about')
  // res.sendFile(path.join(__dirname, 'index.html'))
  // res.status(500)
  res.json({ harry: 34 });
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});


23. After this create 3 folders static, templates and routes. and
inside routes create blog.js file. 
//blog.js
const express = require("express");
const router = require(express.Router)

24. //index.js
const express = require("express");
const app = express();
const path = require("path");
const port = 3000;

app.use(express.static(path.join(__dirname, "static")))
// app.use(harryMiddleware)
//middleware, keep access of request and response

app.listen(port, () => {
  console.log(`Blog app listening on http://localhost:${port}`);
});

//Create a index.html file inside templates folder
//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HomePage</title>
</head>
<body>
    This is my blogpage
</body>
</html>


//blog.js
const express = require("express");
const router = require(express.Router)

router.get('/', (req, res) =>{
    res.sendFile('templates/index.html')
})

25.
//index.js
const express = require("express");
const app = express();
const path = require("path");
const port = 3000;

app.use(express.static(path.join(__dirname, "static")))
app.use('/', require(path.join(__dirname, 'routes/blog.js')))

app.listen(port, () => {
  console.log(`Blog app listening on http://localhost:${port}`);
});


//blog.js
const express = require("express")
const path = require("path")
const router = express.Router()

router.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../templates/index.html'))
})
//put ../templates link cause there are 3 folders in this app
//where you have to come out and search this folder and go 
//inside of it to find the file.

module.exports = router


//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HomePage</title>
</head>
<body>
    This is my blog homepage
</body>
</html>

//Also install npm install -D nodemon, as as dev dependency,
//cause we don't want to install or use it as a app



Status: 20 mins